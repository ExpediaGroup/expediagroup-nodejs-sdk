{{>licenseInfo}}

{{#imports}}
import { {{classname}} } from '../../models/{{classname}}'
{{/imports}}

import { v4 as uuid } from 'uuid'
import {platform, release} from 'os'
import { Client, ClientConfigurations, Serializer, ExpediaGroupError } from '../../core'
import { ExpediaGroupRequestError } from '../../models/error/ExpediaGroupRequestError'

/**
 * {{{description}}}
 */
{{#operations}}
export class {{classname}} extends Client {
    private static readonly sdkTitle: string = '{{artifactId}}'
    private static readonly nodeVersion: string = process.version
    private static readonly operatingSystemName: string = platform()
    private static readonly operatingSystemVersion: string = release()
    private static readonly userAgent: string = `${ {{classname}}.sdkTitle }/{{artifactVersion}} (NodeJS ${this.nodeVersion} ${this.operatingSystemName} ${this.operatingSystemVersion})`

    constructor(configurations: ClientConfigurations) {
        super(configurations)
    }

    private static createHeaders(transactionId: string) {
        return {
            'Content-Type': 'application/json',
            'User-Agent': {{classname}}.userAgent,
            'transaction-id': transactionId,
            'x-sdk-title': {{classname}}.sdkTitle
        }
    }

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#queryParams}}* @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, defaults to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (defaults to {{{.}}}){{/defaultValue}}{{/required}}
     {{/queryParams}}{{#bodyParams}}* @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, defaults to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (defaults to {{{.}}}){{/defaultValue}}{{/required}}
     {{/bodyParams}}{{#formParams}}* @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, defaults to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (defaults to {{{.}}}){{/defaultValue}}{{/required}}
     {{/formParams}}* @param transactionId A unique ID to uniquely identify a request/response cycle (optional, defaults to a random generated UUID)
     * @return Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}>
     {{#throws}}{{/throws}}
     */
    {{operationId}}({{>api/apiParamsDecleration}}): Promise<{{{returnType}}}>  {
        {{#returnProperty}}let responsePromise = {{/returnProperty}}this.axiosClient.request({
            method: '{{httpMethod}}',
            url: '{{#removeLeadingSlash}}{{path}}{{/removeLeadingSlash}}'{{#bodyParam}},
            headers: {{classname}}.createHeaders(transactionId),
            data: Serializer.serialize({{{paramName}}}){{/bodyParam}}
        }).catch(error => {
            if (error instanceof ExpediaGroupError) {
                throw error
            }
            throw new ExpediaGroupRequestError<string>(error.response?.data, error.response?.status)
        })
        {{#returnProperty}}
        return responsePromise.then((response) => {
            return Serializer.deserializeObject<{{{returnType}}}>(response.data, {{{returnType}}}) as {{{returnType}}}
        });
        {{/returnProperty}}
    }
    {{/operation}}
}
{{/operations}}
