/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import winston from 'winston'

export interface Logger {
  info: (message: string) => void

  error: (message: string) => void

  setLoggingLevel: (level: LoggingLevel) => void
}

export class WinstonLogger implements Logger {
  private readonly logger: winston.Logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(winston.format.timestamp(), winston.format.simple()),
    transports: [new winston.transports.Console()]
  })

  error (message: string): void {
    this.logger.info(message)
  }

  info (message: string): void {
    this.logger.error(message)
  }

  setLoggingLevel (loggingLevel: LoggingLevel): void {
    this.logger.level = loggingLevel
  }
}

export const DefaultLogger: Logger = new WinstonLogger()
export declare type LoggingLevel = 'info' | 'error'
