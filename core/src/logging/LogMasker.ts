/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import _ from 'lodash'
import { LoggingMessage } from '../constant/Logging'
import { LOG_MASKING_BODY_FIELDS, LOG_MASKING_HEADERS } from '../constant/LogMaskingFields'
import {
  AxiosRequestHeaders,
  AxiosResponse,
  AxiosResponseHeaders,
  InternalAxiosRequestConfig,
  RawAxiosResponseHeaders
} from 'axios'

export function maskFields (config: AxiosConfig): AxiosConfig {
  const clone: AxiosConfig = _.cloneDeep(config)
  clone.headers = maskHeaders(clone.headers)
  clone.data = maskBodyFields(clone.data)
  return clone
}

function maskHeaders (headers: Headers): Headers {
  const clonedHeaders: Headers = {}
  for (const header in headers) {
    clonedHeaders[header] = LOG_MASKING_HEADERS.includes(header.toLowerCase())
      ? LoggingMessage.OMITTED
      : headers[header]
  }
  return clonedHeaders
}

function maskBodyFields (body: object): object {
  if (typeof body !== 'object') {
    return body
  }
  for (const field in body) {
    body[field] = LOG_MASKING_BODY_FIELDS.includes(field.toLowerCase())
      ? LoggingMessage.OMITTED
      : maskBodyFields(body[field])
  }
  return body
}

declare type Headers = RawAxiosResponseHeaders | AxiosResponseHeaders | AxiosRequestHeaders

export declare type AxiosConfig = InternalAxiosRequestConfig<any> | AxiosResponse<any, any>
