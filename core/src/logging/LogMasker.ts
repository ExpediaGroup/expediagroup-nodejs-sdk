/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LoggingMessage } from '../constant/Logging'
import { LogMaskingRegex } from '../constant/LogMaskingRegex'

export function mask (message: string): string {
  return MaskProvider.masks.reduce((currentMessage: string, mask: Mask): string => {
    return mask.mask(currentMessage)
  }, message)
}

abstract class Mask {
  protected readonly abstract regex: RegExp

  mask (stringMessage: string): string {
    while (stringMessage.match(this.regex) != null) {
      stringMessage = stringMessage.replace(this.regex, substring => this.maskSubstring(substring))
    }
    return stringMessage
  }

  protected abstract maskSubstring (substring: string): string
}

class AuthTokenMask extends Mask {
  private static readonly _instance: AuthTokenMask = new AuthTokenMask()

  protected readonly regex: RegExp = new RegExp(LogMaskingRegex.AUTHORIZATION_REGEX)

  static get instance (): AuthTokenMask {
    return this._instance
  }

  private constructor () {
    super()
  }

  protected maskSubstring (substring: string): string {
    return LoggingMessage.OMITTED
  }
}

class AuthUsernameMask extends Mask {
  private static readonly _instance: AuthUsernameMask = new AuthUsernameMask()

  protected readonly regex: RegExp = new RegExp(LogMaskingRegex.AUTH_USERNAME_REGEX)

  static get instance (): AuthUsernameMask {
    return this._instance
  }

  protected maskSubstring (substring: string): string {
    return LoggingMessage.OMITTED
  }
}

class AuthPasswordMask extends Mask {
  private static readonly _instance: AuthPasswordMask = new AuthPasswordMask()

  protected readonly regex: RegExp = new RegExp(LogMaskingRegex.AUTH_PASSWORD_REGEX)

  static get instance (): AuthPasswordMask {
    return this._instance
  }

  protected maskSubstring (substring: string): string {
    return LoggingMessage.OMITTED
  }
}

class AccessTokenMask extends Mask {
  private static readonly _instance: AccessTokenMask = new AccessTokenMask()

  protected readonly regex: RegExp = new RegExp(LogMaskingRegex.ACCESS_TOKEN_REGEX)

  static get instance (): AccessTokenMask {
    return this._instance
  }

  protected maskSubstring (substring: string): string {
    return LoggingMessage.OMITTED
  }
}

// eslint-disable-next-line @typescript-eslint/no-extraneous-class
class MaskProvider {
  private static readonly _masks: Mask[] = [AuthTokenMask.instance, AuthUsernameMask.instance, AuthPasswordMask.instance, AccessTokenMask.instance]

  static get masks (): Mask[] {
    return this._masks
  }
}
