/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Payment } from './Payment'
import { Telephone } from './Telephone'

import { TelephoneMapper } from './TelephoneMapper'

import { JsonObject, JsonProperty } from 'typescript-json-serializer'
import { PaymentProperties } from './Payment'

@JsonObject({ constructorParams: [{}] })
export class CreditCard extends Payment {
    /**
     * The \'card_type\' field value is an enum value which is associated with the payment method of the specific payment instrument. For credit card payment method ensure attributes mentioned in dictionary below are set to corresponding values only. Ensure to comply with the naming standards provided in below dictionary. For example, some Payment processors use “Japan Credit Bureau” but “JCB” should be used when calling Fraud API. Incorrect `card_type` - `brand` combination will result in data quality issues and result in degraded risk recommendation. \'card_type\' is an enum value with the following mapping with Payment `brand` attribute: *       card_type            :          brand * -------------------------------------------------------- * `AMERICAN_EXPRESS`         : `AMERICAN_EXPRESS` * `DINERS_CLUB`              : `DINERS_CLUB_INTERNATIONAL` * `DINERS_CLUB`              : `BC_CARD` * `DISCOVER`                 : `DISCOVER` * `DISCOVER`                 : `BC_CARD` * `DISCOVER`                 : `DINERS_CLUB_INTERNATIONAL` * `DISCOVER`                 : `JCB` * `JCB`                      : `JCB` * `MASTER_CARD`              : `MASTER_CARD` * `MASTER_CARD`              : `MAESTRO` * `MASTER_CARD`              : `POSTEPAY_MASTERCARD` * `SOLO`                     : `SOLO` * `SWITCH`                   : `SWITCH` * `MAESTRO`                  : `MAESTRO` * `CHINA_UNION_PAY`          : `CHINA_UNION_PAY` * `VISA`                     : `VISA` * `VISA`                     : `VISA_DELTA` * `VISA`                     : `VISA_ELECTRON` * `VISA`                     : `CARTA_SI` * `VISA`                     : `CARTE_BLEUE` * `VISA`                     : `VISA_DANKORT` * `VISA`                     : `POSTEPAY_VISA_ELECTRON`
     */
    @JsonProperty({ name: 'card_type' })
    cardType: CreditCardCardTypeEnum
    /**
     * All the digits (unencrypted) of the credit card number associated with the payment.
     */
    @JsonProperty({ name: 'card_number' })
    cardNumber: string
    /**
     * Expiration date of the credit card used for payment, in ISO-8601 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
     */
    @JsonProperty({ name: 'expiry_date' })
    expiryDate: Date
    /**
     * Electronic Commerce Indicator, a two or three digit number usually returned by a 3rd party payment processor in regards to the authentication used when gathering the cardholder\'s payment credentials.
     */
    @JsonProperty({ name: 'electronic_commerce_indicator' })
    electronicCommerceIndicator?: string
    /**
     * A flag to indicate that the bank card being used for the charge is a virtual credit card.
     */
    @JsonProperty({ name: 'virtual_credit_card_flag' })
    virtualCreditCardFlag?: boolean
    /**
     * If a virtual/digital form of payment was used, the type of digital wallet should be specified here. Possible `wallet_type`\'s include: `Google` or `ApplePay`.
     */
    @JsonProperty({ name: 'wallet_type' })
    walletType?: string
    /**
     * A field used to confirm if the address provided at the time of purchase matches what the bank has on file for the Credit Card.
     */
    @JsonProperty({ name: 'card_avs_response' })
    cardAvsResponse?: string
    /**
     * A field used to confirm the Card Verification Value on the Credit Card matches the Credit Card used at the time of purchase.
     */
    @JsonProperty({ name: 'card_cvv_response' })
    cardCvvResponse?: string
    /**
     * Telephone(s) associated with card holder and credit card.
     */
    @JsonProperty({
        name: 'telephones',
        type: (property) => TelephoneMapper.getType(property),
    })
    telephones: Array<Telephone>
    /**
     * Reference code passed to acquiring bank at the time of payment. This code is the key ID that ties back to payments data at the payment level.
     */
    @JsonProperty({ name: 'merchant_order_code' })
    merchantOrderCode?: string
    /**
     * Total authentication failure count for given card.
     */
    @JsonProperty({ name: 'card_authentication_failure_count' })
    cardAuthenticationFailureCount?: number

    @JsonProperty('method')
    readonly method = 'CREDIT_CARD'

    public constructor(creditCard: CreditCardProperties) {
        super({
            brand: creditCard.brand,
            reason: creditCard.reason,
            billingName: creditCard.billingName,
            billingAddress: creditCard.billingAddress,
            billingEmailAddress: creditCard.billingEmailAddress,
            authorizedAmount: creditCard.authorizedAmount,
            verifiedAmount: creditCard.verifiedAmount,
            threeDigitsSecureCriteria: creditCard.threeDigitsSecureCriteria,
            operations: creditCard.operations,
        })
        this.cardType = creditCard.cardType
        this.cardNumber = creditCard.cardNumber
        this.expiryDate = creditCard.expiryDate
        this.electronicCommerceIndicator =
            creditCard.electronicCommerceIndicator
        this.virtualCreditCardFlag = creditCard.virtualCreditCardFlag
        this.walletType = creditCard.walletType
        this.cardAvsResponse = creditCard.cardAvsResponse
        this.cardCvvResponse = creditCard.cardCvvResponse
        this.telephones = creditCard.telephones
        this.merchantOrderCode = creditCard.merchantOrderCode
        this.cardAuthenticationFailureCount =
            creditCard.cardAuthenticationFailureCount
    }
}

export type CreditCardCardTypeEnum =
    | 'AMERICAN_EXPRESS'
    | 'DINERS_CLUB'
    | 'DISCOVER'
    | 'JCB'
    | 'MASTER_CARD'
    | 'SOLO'
    | 'SWITCH'
    | 'MAESTRO'
    | 'CHINA_UNION_PAY'
    | 'VISA'

export interface CreditCardProperties extends PaymentProperties {
    cardType: CreditCardCardTypeEnum
    cardNumber: string
    expiryDate: Date
    electronicCommerceIndicator?: string
    virtualCreditCardFlag?: boolean
    walletType?: string
    cardAvsResponse?: string
    cardCvvResponse?: string
    telephones: Array<Telephone>
    merchantOrderCode?: string
    cardAuthenticationFailureCount?: number
}
