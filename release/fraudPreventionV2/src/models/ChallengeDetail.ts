/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { JsonObject, JsonProperty } from 'typescript-json-serializer'

/**
 * Information related to challenges initiated by the Partner\'s system to a user before calling Expedia\'s Fraud Prevention Service.
 */
@JsonObject({ constructorParams: [{}] })
export class ChallengeDetail {
    /**
     * Indicates that there was a challenge initiated by the Partner\'s system to a user before calling Expedia\'s Fraud Prevention Service.
     */
    @JsonProperty({ name: 'displayed_flag' })
    displayedFlag: boolean
    /**
     * The kind of challenge served by the Partner\'\'s system to a user prior to calling Expedia\'\'s Fraud Prevention Service. - `CAPTCHA` - Applicable if the challenge served by the Partner\'\'s system was a Captcha challenge. - `TWO_FACTOR` - Applicable if the challenge served by the Partner\'\'s system was a two-factor challenge including (Email verification, One Time Password, Okta, etc).
     */
    @JsonProperty({ name: 'type' })
    type: ChallengeDetailTypeEnum
    /**
     * The status of the challenge served by the Partner\'\'s system to a user before calling Expedia\'\'s Fraud Prevention Service. - `SUCCESS` - Applicable if the user successfully passed the challenge. - `FAILED` - Applicable if the user failed the challenge.
     */
    @JsonProperty({ name: 'status' })
    status: ChallengeDetailStatusEnum

    public constructor(challengeDetail: ChallengeDetailProperties) {
        this.displayedFlag = challengeDetail.displayedFlag
        this.type = challengeDetail.type
        this.status = challengeDetail.status
    }
}

export type ChallengeDetailTypeEnum = 'CAPTCHA' | 'TWO_FACTOR'
export type ChallengeDetailStatusEnum = 'SUCCESS' | 'FAILED'

export interface ChallengeDetailProperties {
    displayedFlag: boolean
    type: ChallengeDetailTypeEnum
    status: ChallengeDetailStatusEnum
}
