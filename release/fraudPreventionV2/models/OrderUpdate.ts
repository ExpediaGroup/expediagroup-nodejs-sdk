/*
 * Copyright (C) 2023 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CancellationReason } from './CancellationReason'
import { OrderPurchaseUpdateRequest } from './OrderPurchaseUpdateRequest'
import { Status } from './Status'

import { CancellationReasonMapper } from './CancellationReasonMapper'

import { JsonObject, JsonProperty } from 'typescript-json-serializer'
import { OrderPurchaseUpdateRequestProperties } from './OrderPurchaseUpdateRequest'

/**
 * Order related data that should be updated.
 */
@JsonObject({ constructorParams: [{}] })
export class OrderUpdate extends OrderPurchaseUpdateRequest {
    @JsonProperty({ name: 'order_status' })
    orderStatus: Status
    /**
     * A unique number that tags a credit or debit card transaction when it goes from the merchant\'s bank through to the cardholder\'s bank. `acquirer_reference_number` is a required field only if `order_status` = `COMPLETED` Typically, merchants can get this number from their payment processors. This number is used when dealing with disputes/chargebacks on original transactions.
     */
    @JsonProperty({ name: 'acquirer_reference_number' })
    acquirerReferenceNumber?: string
    @JsonProperty({
        name: 'cancellation_reason',
        type: (property) => CancellationReasonMapper.getType(property),
    })
    cancellationReason?: CancellationReason

    @JsonProperty('type')
    readonly type = 'ORDER_UPDATE'

    public constructor(orderUpdate: OrderUpdateProperties) {
        super({
            riskId: orderUpdate.riskId,
        })
        this.orderStatus = orderUpdate.orderStatus
        this.acquirerReferenceNumber = orderUpdate.acquirerReferenceNumber
        this.cancellationReason = orderUpdate.cancellationReason
    }
}

export interface OrderUpdateProperties
    extends OrderPurchaseUpdateRequestProperties {
    orderStatus: Status
    acquirerReferenceNumber?: string
    cancellationReason?: CancellationReason
}
